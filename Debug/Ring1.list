
Ring1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002854  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080029dc  080029dc  000129dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029f4  080029f4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080029f4  080029f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029fc  080029fc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029fc  080029fc  000129fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a00  08002a00  00012a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000074  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000084  20000084  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008acb  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000019af  00000000  00000000  00028b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000700  00000000  00000000  0002a500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000054b  00000000  00000000  0002ac00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f96e  00000000  00000000  0002b14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009ef7  00000000  00000000  0004aab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bea2d  00000000  00000000  000549b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001ab8  00000000  00000000  001133e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00114e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080029c4 	.word	0x080029c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080029c4 	.word	0x080029c4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	4b10      	ldr	r3, [pc, #64]	; (8000510 <MX_GPIO_Init+0x4c>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d2:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <MX_GPIO_Init+0x4c>)
 80004d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004d8:	6313      	str	r3, [r2, #48]	; 0x30
 80004da:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <MX_GPIO_Init+0x4c>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	603b      	str	r3, [r7, #0]
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_GPIO_Init+0x4c>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a08      	ldr	r2, [pc, #32]	; (8000510 <MX_GPIO_Init+0x4c>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_GPIO_Init+0x4c>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]

}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40023800 	.word	0x40023800

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fa66 	bl	80009e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f80e 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f7ff ffd0 	bl	80004c4 <MX_GPIO_Init>
  MX_UART4_Init();
 8000524:	f000 f9bc 	bl	80008a0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */




  HAL_UART_Receive_IT(&huart4, &rx_buff, 1);
 8000528:	2201      	movs	r2, #1
 800052a:	4902      	ldr	r1, [pc, #8]	; (8000534 <main+0x20>)
 800052c:	4802      	ldr	r0, [pc, #8]	; (8000538 <main+0x24>)
 800052e:	f001 faf2 	bl	8001b16 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000532:	e7fe      	b.n	8000532 <main+0x1e>
 8000534:	2000002c 	.word	0x2000002c
 8000538:	2000003c 	.word	0x2000003c

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f002 fa0e 	bl	800296c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a27      	ldr	r2, [pc, #156]	; (8000608 <SystemClock_Config+0xcc>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <SystemClock_Config+0xd0>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ac:	2308      	movs	r3, #8
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ba:	2307      	movs	r3, #7
 80005bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fdc2 	bl	800114c <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ce:	f000 f81f 	bl	8000610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2302      	movs	r3, #2
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2105      	movs	r1, #5
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 f823 	bl	800163c <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005fc:	f000 f808 	bl	8000610 <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	; 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
}
 8000616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000618:	e7fe      	b.n	8000618 <Error_Handler+0x8>
	...

0800061c <ring>:

//ring buffer that will contain the controlled data package
static uint8_t bufferRing[9];

void ring(uint8_t oneBitValue)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	static uint8_t stopbit 	= 0xFF;	//stopbit; control last element of received data package
	static uint8_t ringLenght = 0;	//ringlenght; in my data package second element is data lenght so ringLenght going to be equal data lenght
	static uint8_t counter = 0;		// counter setting up counter is very important for storing data to bufferRing


	if(counter == 0 && oneBitValue == startbit)	// First control checkpoint for starbit
 8000626:	4b3e      	ldr	r3, [pc, #248]	; (8000720 <ring+0x104>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d114      	bne.n	8000658 <ring+0x3c>
 800062e:	4b3d      	ldr	r3, [pc, #244]	; (8000724 <ring+0x108>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	79fa      	ldrb	r2, [r7, #7]
 8000634:	429a      	cmp	r2, r3
 8000636:	d10f      	bne.n	8000658 <ring+0x3c>
	{
		bufferRing[counter] = oneBitValue;
 8000638:	4b39      	ldr	r3, [pc, #228]	; (8000720 <ring+0x104>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	4a3a      	ldr	r2, [pc, #232]	; (8000728 <ring+0x10c>)
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	5453      	strb	r3, [r2, r1]
		counter++;
 8000644:	4b36      	ldr	r3, [pc, #216]	; (8000720 <ring+0x104>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	3301      	adds	r3, #1
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b34      	ldr	r3, [pc, #208]	; (8000720 <ring+0x104>)
 800064e:	701a      	strb	r2, [r3, #0]
		ringLenght = 0;
 8000650:	4b36      	ldr	r3, [pc, #216]	; (800072c <ring+0x110>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	e05e      	b.n	8000716 <ring+0xfa>
	}
	else if(counter == 0 &&  oneBitValue != startbit)	//If startbit is not right initializing counter to 0. Maybe not necessary
 8000658:	4b31      	ldr	r3, [pc, #196]	; (8000720 <ring+0x104>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d108      	bne.n	8000672 <ring+0x56>
 8000660:	4b30      	ldr	r3, [pc, #192]	; (8000724 <ring+0x108>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	79fa      	ldrb	r2, [r7, #7]
 8000666:	429a      	cmp	r2, r3
 8000668:	d003      	beq.n	8000672 <ring+0x56>
	{
		counter = 0;
 800066a:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <ring+0x104>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	e051      	b.n	8000716 <ring+0xfa>
	}

	else if(counter == 1)	//second control, definetly going to be executed if startbit is correct. setting up ringLenght and storing second data value to bufferRing
 8000672:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <ring+0x104>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d10f      	bne.n	800069a <ring+0x7e>
	{
		ringLenght = oneBitValue;
 800067a:	4a2c      	ldr	r2, [pc, #176]	; (800072c <ring+0x110>)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	7013      	strb	r3, [r2, #0]
		bufferRing[counter] = oneBitValue;
 8000680:	4b27      	ldr	r3, [pc, #156]	; (8000720 <ring+0x104>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	4a28      	ldr	r2, [pc, #160]	; (8000728 <ring+0x10c>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	5453      	strb	r3, [r2, r1]
		counter++;
 800068c:	4b24      	ldr	r3, [pc, #144]	; (8000720 <ring+0x104>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	b2da      	uxtb	r2, r3
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <ring+0x104>)
 8000696:	701a      	strb	r2, [r3, #0]

			ringLenght = 0;
		}
	}

}
 8000698:	e03d      	b.n	8000716 <ring+0xfa>
	else if(counter >= 2 && counter < ringLenght-1)	//This part going to be store datas to ringBuffer no matter what.
 800069a:	4b21      	ldr	r3, [pc, #132]	; (8000720 <ring+0x104>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d914      	bls.n	80006cc <ring+0xb0>
 80006a2:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <ring+0x104>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	461a      	mov	r2, r3
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <ring+0x110>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	429a      	cmp	r2, r3
 80006b0:	da0c      	bge.n	80006cc <ring+0xb0>
		bufferRing[counter] = oneBitValue;
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <ring+0x104>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	4619      	mov	r1, r3
 80006b8:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <ring+0x10c>)
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	5453      	strb	r3, [r2, r1]
		counter++;
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <ring+0x104>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	3301      	adds	r3, #1
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <ring+0x104>)
 80006c8:	701a      	strb	r2, [r3, #0]
 80006ca:	e024      	b.n	8000716 <ring+0xfa>
		if(counter == ringLenght-1 && oneBitValue == stopbit) // last control part checks for stopbit if stopbit is not right else part can be written for erasing ringBuffer.
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <ring+0x104>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <ring+0x110>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	429a      	cmp	r2, r3
 80006da:	d11c      	bne.n	8000716 <ring+0xfa>
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <ring+0x114>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	79fa      	ldrb	r2, [r7, #7]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d117      	bne.n	8000716 <ring+0xfa>
			bufferRing[counter] = oneBitValue;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <ring+0x104>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	4619      	mov	r1, r3
 80006ec:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <ring+0x10c>)
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	5453      	strb	r3, [r2, r1]
			counter = 0;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <ring+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
			bufferRing[ringLenght] = crcCalc(bufferRing, sizeof(bufferRing));
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <ring+0x110>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	461c      	mov	r4, r3
 80006fe:	2109      	movs	r1, #9
 8000700:	4809      	ldr	r0, [pc, #36]	; (8000728 <ring+0x10c>)
 8000702:	f000 f817 	bl	8000734 <crcCalc>
 8000706:	4603      	mov	r3, r0
 8000708:	461a      	mov	r2, r3
 800070a:	4b07      	ldr	r3, [pc, #28]	; (8000728 <ring+0x10c>)
 800070c:	551a      	strb	r2, [r3, r4]
			ringLenght = 0;
 800070e:	4b07      	ldr	r3, [pc, #28]	; (800072c <ring+0x110>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
}
 8000714:	e7ff      	b.n	8000716 <ring+0xfa>
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	bd90      	pop	{r4, r7, pc}
 800071e:	bf00      	nop
 8000720:	2000003a 	.word	0x2000003a
 8000724:	20000000 	.word	0x20000000
 8000728:	20000030 	.word	0x20000030
 800072c:	2000003b 	.word	0x2000003b
 8000730:	20000001 	.word	0x20000001

08000734 <crcCalc>:

uint8_t CRC_u8 = 0;

uint8_t crcCalc(uint8_t crcArray[], uint8_t size)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]

	for(size_t i = 0; i<size; i++)
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	e00c      	b.n	8000760 <crcCalc+0x2c>
	{
		CRC_u8 = crcArray[i] ^ CRC_u8;
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	781a      	ldrb	r2, [r3, #0]
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <crcCalc+0x50>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	4053      	eors	r3, r2
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <crcCalc+0x50>)
 8000758:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i<size; i++)
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3301      	adds	r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	78fb      	ldrb	r3, [r7, #3]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d3ee      	bcc.n	8000746 <crcCalc+0x12>
	}

	CRC_u8 = CRC_u8 ^ 0x00FF;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <crcCalc+0x50>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	43db      	mvns	r3, r3
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b04      	ldr	r3, [pc, #16]	; (8000784 <crcCalc+0x50>)
 8000772:	701a      	strb	r2, [r3, #0]
//	    0x3E, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2C, 0x2B, 0x06, 0x01, 0x08, 0x0F, 0x1A, 0x1D, 0x14, 0x13,
//	    0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB, 0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83,
//	    0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB, 0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3
//	};

	return CRC_u8;
 8000774:	4b03      	ldr	r3, [pc, #12]	; (8000784 <crcCalc+0x50>)
 8000776:	781b      	ldrb	r3, [r3, #0]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	20000039 	.word	0x20000039

08000788 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_UART_RxCpltCallback+0x30>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d109      	bne.n	80007ae <HAL_UART_RxCpltCallback+0x26>
	{
		ring(rx_buff);
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_UART_RxCpltCallback+0x34>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff3c 	bl	800061c <ring>
		HAL_UART_Receive_IT(&huart4, &rx_buff, 1);
 80007a4:	2201      	movs	r2, #1
 80007a6:	4905      	ldr	r1, [pc, #20]	; (80007bc <HAL_UART_RxCpltCallback+0x34>)
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <HAL_UART_RxCpltCallback+0x38>)
 80007aa:	f001 f9b4 	bl	8001b16 <HAL_UART_Receive_IT>

	}
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40004c00 	.word	0x40004c00
 80007bc:	2000002c 	.word	0x2000002c
 80007c0:	2000003c 	.word	0x2000003c

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <HAL_MspInit+0x4c>)
 80007d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d8:	6453      	str	r3, [r2, #68]	; 0x44
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_MspInit+0x4c>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	6413      	str	r3, [r2, #64]	; 0x40
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000802:	2007      	movs	r0, #7
 8000804:	f000 fa32 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <NMI_Handler+0x4>

0800081a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <HardFault_Handler+0x4>

08000820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <MemManage_Handler+0x4>

08000826 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <BusFault_Handler+0x4>

0800082c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <UsageFault_Handler+0x4>

08000832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000860:	f000 f914 	bl	8000a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}

08000868 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800086c:	4802      	ldr	r0, [pc, #8]	; (8000878 <UART4_IRQHandler+0x10>)
 800086e:	f001 f983 	bl	8001b78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2000003c 	.word	0x2000003c

0800087c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <SystemInit+0x20>)
 8000882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000886:	4a05      	ldr	r2, [pc, #20]	; (800089c <SystemInit+0x20>)
 8000888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800088c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_UART4_Init+0x4c>)
 80008a6:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <MX_UART4_Init+0x50>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_UART4_Init+0x4c>)
 80008ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_UART4_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_UART4_Init+0x4c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_UART4_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_UART4_Init+0x4c>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_UART4_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_UART4_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_UART4_Init+0x4c>)
 80008d8:	f001 f8d0 	bl	8001a7c <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80008e2:	f7ff fe95 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000003c 	.word	0x2000003c
 80008f0:	40004c00 	.word	0x40004c00

080008f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	; 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a1d      	ldr	r2, [pc, #116]	; (8000988 <HAL_UART_MspInit+0x94>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d133      	bne.n	800097e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	4b1c      	ldr	r3, [pc, #112]	; (800098c <HAL_UART_MspInit+0x98>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a1b      	ldr	r2, [pc, #108]	; (800098c <HAL_UART_MspInit+0x98>)
 8000920:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <HAL_UART_MspInit+0x98>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <HAL_UART_MspInit+0x98>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a14      	ldr	r2, [pc, #80]	; (800098c <HAL_UART_MspInit+0x98>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_UART_MspInit+0x98>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800094e:	2303      	movs	r3, #3
 8000950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800095e:	2308      	movs	r3, #8
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	4809      	ldr	r0, [pc, #36]	; (8000990 <HAL_UART_MspInit+0x9c>)
 800096a:	f000 fa53 	bl	8000e14 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2034      	movs	r0, #52	; 0x34
 8000974:	f000 f985 	bl	8000c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000978:	2034      	movs	r0, #52	; 0x34
 800097a:	f000 f99e 	bl	8000cba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800097e:	bf00      	nop
 8000980:	3728      	adds	r7, #40	; 0x28
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40004c00 	.word	0x40004c00
 800098c:	40023800 	.word	0x40023800
 8000990:	40020000 	.word	0x40020000

08000994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000998:	480d      	ldr	r0, [pc, #52]	; (80009d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800099a:	490e      	ldr	r1, [pc, #56]	; (80009d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800099c:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009b0:	4c0b      	ldr	r4, [pc, #44]	; (80009e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009be:	f7ff ff5d 	bl	800087c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009c2:	f001 ffdb 	bl	800297c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009c6:	f7ff fda5 	bl	8000514 <main>
  bx  lr    
 80009ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009d8:	08002a04 	.word	0x08002a04
  ldr r2, =_sbss
 80009dc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009e0:	20000084 	.word	0x20000084

080009e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC_IRQHandler>
	...

080009e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <HAL_Init+0x40>)
 80009f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_Init+0x40>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <HAL_Init+0x40>)
 80009fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_Init+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <HAL_Init+0x40>)
 8000a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 f92b 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f000 f808 	bl	8000a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1c:	f7ff fed2 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023c00 	.word	0x40023c00

08000a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_InitTick+0x54>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_InitTick+0x58>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 f943 	bl	8000cd6 <HAL_SYSTICK_Config>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e00e      	b.n	8000a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b0f      	cmp	r3, #15
 8000a5e:	d80a      	bhi.n	8000a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a60:	2200      	movs	r2, #0
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295
 8000a68:	f000 f90b 	bl	8000c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a6c:	4a06      	ldr	r2, [pc, #24]	; (8000a88 <HAL_InitTick+0x5c>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e000      	b.n	8000a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000004 	.word	0x20000004
 8000a84:	2000000c 	.word	0x2000000c
 8000a88:	20000008 	.word	0x20000008

08000a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_IncTick+0x20>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x24>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <HAL_IncTick+0x24>)
 8000a9e:	6013      	str	r3, [r2, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	2000000c 	.word	0x2000000c
 8000ab0:	20000080 	.word	0x20000080

08000ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <HAL_GetTick+0x14>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000080 	.word	0x20000080

08000acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afe:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <__NVIC_SetPriorityGrouping+0x44>)
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	60d3      	str	r3, [r2, #12]
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <__NVIC_GetPriorityGrouping+0x18>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	0a1b      	lsrs	r3, r3, #8
 8000b1e:	f003 0307 	and.w	r3, r3, #7
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	db0b      	blt.n	8000b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	f003 021f 	and.w	r2, r3, #31
 8000b48:	4907      	ldr	r1, [pc, #28]	; (8000b68 <__NVIC_EnableIRQ+0x38>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	095b      	lsrs	r3, r3, #5
 8000b50:	2001      	movs	r0, #1
 8000b52:	fa00 f202 	lsl.w	r2, r0, r2
 8000b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000e100 	.word	0xe000e100

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	db0a      	blt.n	8000b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <__NVIC_SetPriority+0x4c>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b94:	e00a      	b.n	8000bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4908      	ldr	r1, [pc, #32]	; (8000bbc <__NVIC_SetPriority+0x50>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	0112      	lsls	r2, r2, #4
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	761a      	strb	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f1c3 0307 	rsb	r3, r3, #7
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf28      	it	cs
 8000bde:	2304      	movcs	r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d902      	bls.n	8000bf0 <NVIC_EncodePriority+0x30>
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3b03      	subs	r3, #3
 8000bee:	e000      	b.n	8000bf2 <NVIC_EncodePriority+0x32>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43d9      	mvns	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	4313      	orrs	r3, r2
         );
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3724      	adds	r7, #36	; 0x24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00f      	b.n	8000c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <SysTick_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	210f      	movs	r1, #15
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f7ff ff8e 	bl	8000b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <SysTick_Config+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <SysTick_Config+0x40>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff29 	bl	8000acc <__NVIC_SetPriorityGrouping>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c94:	f7ff ff3e 	bl	8000b14 <__NVIC_GetPriorityGrouping>
 8000c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff ff8e 	bl	8000bc0 <NVIC_EncodePriority>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff5d 	bl	8000b6c <__NVIC_SetPriority>
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff31 	bl	8000b30 <__NVIC_EnableIRQ>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ffa2 	bl	8000c28 <SysTick_Config>
 8000ce4:	4603      	mov	r3, r0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b084      	sub	sp, #16
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000cfc:	f7ff feda 	bl	8000ab4 <HAL_GetTick>
 8000d00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d008      	beq.n	8000d20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2280      	movs	r2, #128	; 0x80
 8000d12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e052      	b.n	8000dc6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f022 0216 	bic.w	r2, r2, #22
 8000d2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	695a      	ldr	r2, [r3, #20]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d103      	bne.n	8000d50 <HAL_DMA_Abort+0x62>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d007      	beq.n	8000d60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f022 0208 	bic.w	r2, r2, #8
 8000d5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f022 0201 	bic.w	r2, r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d70:	e013      	b.n	8000d9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d72:	f7ff fe9f 	bl	8000ab4 <HAL_GetTick>
 8000d76:	4602      	mov	r2, r0
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	2b05      	cmp	r3, #5
 8000d7e:	d90c      	bls.n	8000d9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2220      	movs	r2, #32
 8000d84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2203      	movs	r2, #3
 8000d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000d96:	2303      	movs	r3, #3
 8000d98:	e015      	b.n	8000dc6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d1e4      	bne.n	8000d72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dac:	223f      	movs	r2, #63	; 0x3f
 8000dae:	409a      	lsls	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2201      	movs	r2, #1
 8000db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d004      	beq.n	8000dec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e00c      	b.n	8000e06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2205      	movs	r2, #5
 8000df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f022 0201 	bic.w	r2, r2, #1
 8000e02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
	...

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
 8000e2e:	e16b      	b.n	8001108 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e30:	2201      	movs	r2, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f040 815a 	bne.w	8001102 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d005      	beq.n	8000e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d130      	bne.n	8000ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	091b      	lsrs	r3, r3, #4
 8000eb2:	f003 0201 	and.w	r2, r3, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d017      	beq.n	8000f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d123      	bne.n	8000f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	08da      	lsrs	r2, r3, #3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3208      	adds	r2, #8
 8000f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	220f      	movs	r2, #15
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	691a      	ldr	r2, [r3, #16]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3208      	adds	r2, #8
 8000f52:	69b9      	ldr	r1, [r7, #24]
 8000f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0203 	and.w	r2, r3, #3
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f000 80b4 	beq.w	8001102 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b60      	ldr	r3, [pc, #384]	; (8001120 <HAL_GPIO_Init+0x30c>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	4a5f      	ldr	r2, [pc, #380]	; (8001120 <HAL_GPIO_Init+0x30c>)
 8000fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000faa:	4b5d      	ldr	r3, [pc, #372]	; (8001120 <HAL_GPIO_Init+0x30c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fb6:	4a5b      	ldr	r2, [pc, #364]	; (8001124 <HAL_GPIO_Init+0x310>)
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	220f      	movs	r2, #15
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a52      	ldr	r2, [pc, #328]	; (8001128 <HAL_GPIO_Init+0x314>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d02b      	beq.n	800103a <HAL_GPIO_Init+0x226>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a51      	ldr	r2, [pc, #324]	; (800112c <HAL_GPIO_Init+0x318>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d025      	beq.n	8001036 <HAL_GPIO_Init+0x222>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a50      	ldr	r2, [pc, #320]	; (8001130 <HAL_GPIO_Init+0x31c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d01f      	beq.n	8001032 <HAL_GPIO_Init+0x21e>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4f      	ldr	r2, [pc, #316]	; (8001134 <HAL_GPIO_Init+0x320>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d019      	beq.n	800102e <HAL_GPIO_Init+0x21a>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4e      	ldr	r2, [pc, #312]	; (8001138 <HAL_GPIO_Init+0x324>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d013      	beq.n	800102a <HAL_GPIO_Init+0x216>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4d      	ldr	r2, [pc, #308]	; (800113c <HAL_GPIO_Init+0x328>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00d      	beq.n	8001026 <HAL_GPIO_Init+0x212>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4c      	ldr	r2, [pc, #304]	; (8001140 <HAL_GPIO_Init+0x32c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d007      	beq.n	8001022 <HAL_GPIO_Init+0x20e>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4b      	ldr	r2, [pc, #300]	; (8001144 <HAL_GPIO_Init+0x330>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d101      	bne.n	800101e <HAL_GPIO_Init+0x20a>
 800101a:	2307      	movs	r3, #7
 800101c:	e00e      	b.n	800103c <HAL_GPIO_Init+0x228>
 800101e:	2308      	movs	r3, #8
 8001020:	e00c      	b.n	800103c <HAL_GPIO_Init+0x228>
 8001022:	2306      	movs	r3, #6
 8001024:	e00a      	b.n	800103c <HAL_GPIO_Init+0x228>
 8001026:	2305      	movs	r3, #5
 8001028:	e008      	b.n	800103c <HAL_GPIO_Init+0x228>
 800102a:	2304      	movs	r3, #4
 800102c:	e006      	b.n	800103c <HAL_GPIO_Init+0x228>
 800102e:	2303      	movs	r3, #3
 8001030:	e004      	b.n	800103c <HAL_GPIO_Init+0x228>
 8001032:	2302      	movs	r3, #2
 8001034:	e002      	b.n	800103c <HAL_GPIO_Init+0x228>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <HAL_GPIO_Init+0x228>
 800103a:	2300      	movs	r3, #0
 800103c:	69fa      	ldr	r2, [r7, #28]
 800103e:	f002 0203 	and.w	r2, r2, #3
 8001042:	0092      	lsls	r2, r2, #2
 8001044:	4093      	lsls	r3, r2
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800104c:	4935      	ldr	r1, [pc, #212]	; (8001124 <HAL_GPIO_Init+0x310>)
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	3302      	adds	r3, #2
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800105a:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <HAL_GPIO_Init+0x334>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800107e:	4a32      	ldr	r2, [pc, #200]	; (8001148 <HAL_GPIO_Init+0x334>)
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001084:	4b30      	ldr	r3, [pc, #192]	; (8001148 <HAL_GPIO_Init+0x334>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a8:	4a27      	ldr	r2, [pc, #156]	; (8001148 <HAL_GPIO_Init+0x334>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <HAL_GPIO_Init+0x334>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d2:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <HAL_GPIO_Init+0x334>)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <HAL_GPIO_Init+0x334>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010fc:	4a12      	ldr	r2, [pc, #72]	; (8001148 <HAL_GPIO_Init+0x334>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3301      	adds	r3, #1
 8001106:	61fb      	str	r3, [r7, #28]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	2b0f      	cmp	r3, #15
 800110c:	f67f ae90 	bls.w	8000e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800
 8001124:	40013800 	.word	0x40013800
 8001128:	40020000 	.word	0x40020000
 800112c:	40020400 	.word	0x40020400
 8001130:	40020800 	.word	0x40020800
 8001134:	40020c00 	.word	0x40020c00
 8001138:	40021000 	.word	0x40021000
 800113c:	40021400 	.word	0x40021400
 8001140:	40021800 	.word	0x40021800
 8001144:	40021c00 	.word	0x40021c00
 8001148:	40013c00 	.word	0x40013c00

0800114c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e267      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	d075      	beq.n	8001256 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800116a:	4b88      	ldr	r3, [pc, #544]	; (800138c <HAL_RCC_OscConfig+0x240>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 030c 	and.w	r3, r3, #12
 8001172:	2b04      	cmp	r3, #4
 8001174:	d00c      	beq.n	8001190 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001176:	4b85      	ldr	r3, [pc, #532]	; (800138c <HAL_RCC_OscConfig+0x240>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800117e:	2b08      	cmp	r3, #8
 8001180:	d112      	bne.n	80011a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001182:	4b82      	ldr	r3, [pc, #520]	; (800138c <HAL_RCC_OscConfig+0x240>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800118e:	d10b      	bne.n	80011a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001190:	4b7e      	ldr	r3, [pc, #504]	; (800138c <HAL_RCC_OscConfig+0x240>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d05b      	beq.n	8001254 <HAL_RCC_OscConfig+0x108>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d157      	bne.n	8001254 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e242      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b0:	d106      	bne.n	80011c0 <HAL_RCC_OscConfig+0x74>
 80011b2:	4b76      	ldr	r3, [pc, #472]	; (800138c <HAL_RCC_OscConfig+0x240>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a75      	ldr	r2, [pc, #468]	; (800138c <HAL_RCC_OscConfig+0x240>)
 80011b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	e01d      	b.n	80011fc <HAL_RCC_OscConfig+0xb0>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011c8:	d10c      	bne.n	80011e4 <HAL_RCC_OscConfig+0x98>
 80011ca:	4b70      	ldr	r3, [pc, #448]	; (800138c <HAL_RCC_OscConfig+0x240>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a6f      	ldr	r2, [pc, #444]	; (800138c <HAL_RCC_OscConfig+0x240>)
 80011d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	4b6d      	ldr	r3, [pc, #436]	; (800138c <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a6c      	ldr	r2, [pc, #432]	; (800138c <HAL_RCC_OscConfig+0x240>)
 80011dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e00b      	b.n	80011fc <HAL_RCC_OscConfig+0xb0>
 80011e4:	4b69      	ldr	r3, [pc, #420]	; (800138c <HAL_RCC_OscConfig+0x240>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a68      	ldr	r2, [pc, #416]	; (800138c <HAL_RCC_OscConfig+0x240>)
 80011ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	4b66      	ldr	r3, [pc, #408]	; (800138c <HAL_RCC_OscConfig+0x240>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a65      	ldr	r2, [pc, #404]	; (800138c <HAL_RCC_OscConfig+0x240>)
 80011f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d013      	beq.n	800122c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fc56 	bl	8000ab4 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff fc52 	bl	8000ab4 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	; 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e207      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121e:	4b5b      	ldr	r3, [pc, #364]	; (800138c <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0xc0>
 800122a:	e014      	b.n	8001256 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fc42 	bl	8000ab4 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001234:	f7ff fc3e 	bl	8000ab4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b64      	cmp	r3, #100	; 0x64
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e1f3      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001246:	4b51      	ldr	r3, [pc, #324]	; (800138c <HAL_RCC_OscConfig+0x240>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0xe8>
 8001252:	e000      	b.n	8001256 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d063      	beq.n	800132a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001262:	4b4a      	ldr	r3, [pc, #296]	; (800138c <HAL_RCC_OscConfig+0x240>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00b      	beq.n	8001286 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800126e:	4b47      	ldr	r3, [pc, #284]	; (800138c <HAL_RCC_OscConfig+0x240>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001276:	2b08      	cmp	r3, #8
 8001278:	d11c      	bne.n	80012b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800127a:	4b44      	ldr	r3, [pc, #272]	; (800138c <HAL_RCC_OscConfig+0x240>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d116      	bne.n	80012b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001286:	4b41      	ldr	r3, [pc, #260]	; (800138c <HAL_RCC_OscConfig+0x240>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d005      	beq.n	800129e <HAL_RCC_OscConfig+0x152>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d001      	beq.n	800129e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e1c7      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129e:	4b3b      	ldr	r3, [pc, #236]	; (800138c <HAL_RCC_OscConfig+0x240>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	4937      	ldr	r1, [pc, #220]	; (800138c <HAL_RCC_OscConfig+0x240>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b2:	e03a      	b.n	800132a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d020      	beq.n	80012fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012bc:	4b34      	ldr	r3, [pc, #208]	; (8001390 <HAL_RCC_OscConfig+0x244>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c2:	f7ff fbf7 	bl	8000ab4 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ca:	f7ff fbf3 	bl	8000ab4 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e1a8      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012dc:	4b2b      	ldr	r3, [pc, #172]	; (800138c <HAL_RCC_OscConfig+0x240>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e8:	4b28      	ldr	r3, [pc, #160]	; (800138c <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	4925      	ldr	r1, [pc, #148]	; (800138c <HAL_RCC_OscConfig+0x240>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	600b      	str	r3, [r1, #0]
 80012fc:	e015      	b.n	800132a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012fe:	4b24      	ldr	r3, [pc, #144]	; (8001390 <HAL_RCC_OscConfig+0x244>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001304:	f7ff fbd6 	bl	8000ab4 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800130c:	f7ff fbd2 	bl	8000ab4 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e187      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131e:	4b1b      	ldr	r3, [pc, #108]	; (800138c <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f0      	bne.n	800130c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b00      	cmp	r3, #0
 8001334:	d036      	beq.n	80013a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d016      	beq.n	800136c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_RCC_OscConfig+0x248>)
 8001340:	2201      	movs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001344:	f7ff fbb6 	bl	8000ab4 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800134c:	f7ff fbb2 	bl	8000ab4 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e167      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_RCC_OscConfig+0x240>)
 8001360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0x200>
 800136a:	e01b      	b.n	80013a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_RCC_OscConfig+0x248>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001372:	f7ff fb9f 	bl	8000ab4 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001378:	e00e      	b.n	8001398 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800137a:	f7ff fb9b 	bl	8000ab4 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d907      	bls.n	8001398 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e150      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
 800138c:	40023800 	.word	0x40023800
 8001390:	42470000 	.word	0x42470000
 8001394:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001398:	4b88      	ldr	r3, [pc, #544]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 800139a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1ea      	bne.n	800137a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 8097 	beq.w	80014e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013b6:	4b81      	ldr	r3, [pc, #516]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10f      	bne.n	80013e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	4b7d      	ldr	r3, [pc, #500]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a7c      	ldr	r2, [pc, #496]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b7a      	ldr	r3, [pc, #488]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013de:	2301      	movs	r3, #1
 80013e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e2:	4b77      	ldr	r3, [pc, #476]	; (80015c0 <HAL_RCC_OscConfig+0x474>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d118      	bne.n	8001420 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ee:	4b74      	ldr	r3, [pc, #464]	; (80015c0 <HAL_RCC_OscConfig+0x474>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a73      	ldr	r2, [pc, #460]	; (80015c0 <HAL_RCC_OscConfig+0x474>)
 80013f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fb5b 	bl	8000ab4 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001402:	f7ff fb57 	bl	8000ab4 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e10c      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001414:	4b6a      	ldr	r3, [pc, #424]	; (80015c0 <HAL_RCC_OscConfig+0x474>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d106      	bne.n	8001436 <HAL_RCC_OscConfig+0x2ea>
 8001428:	4b64      	ldr	r3, [pc, #400]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 800142a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142c:	4a63      	ldr	r2, [pc, #396]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6713      	str	r3, [r2, #112]	; 0x70
 8001434:	e01c      	b.n	8001470 <HAL_RCC_OscConfig+0x324>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b05      	cmp	r3, #5
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0x30c>
 800143e:	4b5f      	ldr	r3, [pc, #380]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 8001440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001442:	4a5e      	ldr	r2, [pc, #376]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6713      	str	r3, [r2, #112]	; 0x70
 800144a:	4b5c      	ldr	r3, [pc, #368]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 800144c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144e:	4a5b      	ldr	r2, [pc, #364]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6713      	str	r3, [r2, #112]	; 0x70
 8001456:	e00b      	b.n	8001470 <HAL_RCC_OscConfig+0x324>
 8001458:	4b58      	ldr	r3, [pc, #352]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 800145a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145c:	4a57      	ldr	r2, [pc, #348]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	6713      	str	r3, [r2, #112]	; 0x70
 8001464:	4b55      	ldr	r3, [pc, #340]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 8001466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001468:	4a54      	ldr	r2, [pc, #336]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 800146a:	f023 0304 	bic.w	r3, r3, #4
 800146e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d015      	beq.n	80014a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001478:	f7ff fb1c 	bl	8000ab4 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147e:	e00a      	b.n	8001496 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001480:	f7ff fb18 	bl	8000ab4 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	f241 3288 	movw	r2, #5000	; 0x1388
 800148e:	4293      	cmp	r3, r2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e0cb      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001496:	4b49      	ldr	r3, [pc, #292]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 8001498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0ee      	beq.n	8001480 <HAL_RCC_OscConfig+0x334>
 80014a2:	e014      	b.n	80014ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a4:	f7ff fb06 	bl	8000ab4 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014aa:	e00a      	b.n	80014c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ac:	f7ff fb02 	bl	8000ab4 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e0b5      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c2:	4b3e      	ldr	r3, [pc, #248]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 80014c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1ee      	bne.n	80014ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014ce:	7dfb      	ldrb	r3, [r7, #23]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d105      	bne.n	80014e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d4:	4b39      	ldr	r3, [pc, #228]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	4a38      	ldr	r2, [pc, #224]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 80014da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80a1 	beq.w	800162c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014ea:	4b34      	ldr	r3, [pc, #208]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d05c      	beq.n	80015b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d141      	bne.n	8001582 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fe:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <HAL_RCC_OscConfig+0x478>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fad6 	bl	8000ab4 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800150c:	f7ff fad2 	bl	8000ab4 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e087      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151e:	4b27      	ldr	r3, [pc, #156]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69da      	ldr	r2, [r3, #28]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	019b      	lsls	r3, r3, #6
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	085b      	lsrs	r3, r3, #1
 8001542:	3b01      	subs	r3, #1
 8001544:	041b      	lsls	r3, r3, #16
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154c:	061b      	lsls	r3, r3, #24
 800154e:	491b      	ldr	r1, [pc, #108]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_RCC_OscConfig+0x478>)
 8001556:	2201      	movs	r2, #1
 8001558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155a:	f7ff faab 	bl	8000ab4 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001562:	f7ff faa7 	bl	8000ab4 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e05c      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x416>
 8001580:	e054      	b.n	800162c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <HAL_RCC_OscConfig+0x478>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff fa94 	bl	8000ab4 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff fa90 	bl	8000ab4 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e045      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_RCC_OscConfig+0x470>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x444>
 80015ae:	e03d      	b.n	800162c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d107      	bne.n	80015c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e038      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40007000 	.word	0x40007000
 80015c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <HAL_RCC_OscConfig+0x4ec>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d028      	beq.n	8001628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d121      	bne.n	8001628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d11a      	bne.n	8001628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015f8:	4013      	ands	r3, r2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001600:	4293      	cmp	r3, r2
 8001602:	d111      	bne.n	8001628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160e:	085b      	lsrs	r3, r3, #1
 8001610:	3b01      	subs	r3, #1
 8001612:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001614:	429a      	cmp	r2, r3
 8001616:	d107      	bne.n	8001628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001622:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800

0800163c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0cc      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001650:	4b68      	ldr	r3, [pc, #416]	; (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d90c      	bls.n	8001678 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165e:	4b65      	ldr	r3, [pc, #404]	; (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001666:	4b63      	ldr	r3, [pc, #396]	; (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d001      	beq.n	8001678 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0b8      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d020      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001690:	4b59      	ldr	r3, [pc, #356]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	4a58      	ldr	r2, [pc, #352]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800169a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a8:	4b53      	ldr	r3, [pc, #332]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4a52      	ldr	r2, [pc, #328]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b4:	4b50      	ldr	r3, [pc, #320]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	494d      	ldr	r1, [pc, #308]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d044      	beq.n	800175c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d107      	bne.n	80016ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	4b47      	ldr	r3, [pc, #284]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d119      	bne.n	800171a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e07f      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d003      	beq.n	80016fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d107      	bne.n	800170a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fa:	4b3f      	ldr	r3, [pc, #252]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d109      	bne.n	800171a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e06f      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170a:	4b3b      	ldr	r3, [pc, #236]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e067      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800171a:	4b37      	ldr	r3, [pc, #220]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f023 0203 	bic.w	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	4934      	ldr	r1, [pc, #208]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	4313      	orrs	r3, r2
 800172a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800172c:	f7ff f9c2 	bl	8000ab4 <HAL_GetTick>
 8001730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001732:	e00a      	b.n	800174a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001734:	f7ff f9be 	bl	8000ab4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e04f      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174a:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 020c 	and.w	r2, r3, #12
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	429a      	cmp	r2, r3
 800175a:	d1eb      	bne.n	8001734 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800175c:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d20c      	bcs.n	8001784 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176a:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e032      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d008      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	4916      	ldr	r1, [pc, #88]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d009      	beq.n	80017c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	490e      	ldr	r1, [pc, #56]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017c2:	f000 f821 	bl	8001808 <HAL_RCC_GetSysClockFreq>
 80017c6:	4602      	mov	r2, r0
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	091b      	lsrs	r3, r3, #4
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	490a      	ldr	r1, [pc, #40]	; (80017fc <HAL_RCC_ClockConfig+0x1c0>)
 80017d4:	5ccb      	ldrb	r3, [r1, r3]
 80017d6:	fa22 f303 	lsr.w	r3, r2, r3
 80017da:	4a09      	ldr	r2, [pc, #36]	; (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff f922 	bl	8000a2c <HAL_InitTick>

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023c00 	.word	0x40023c00
 80017f8:	40023800 	.word	0x40023800
 80017fc:	080029dc 	.word	0x080029dc
 8001800:	20000004 	.word	0x20000004
 8001804:	20000008 	.word	0x20000008

08001808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800180c:	b094      	sub	sp, #80	; 0x50
 800180e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	647b      	str	r3, [r7, #68]	; 0x44
 8001814:	2300      	movs	r3, #0
 8001816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001818:	2300      	movs	r3, #0
 800181a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001820:	4b79      	ldr	r3, [pc, #484]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b08      	cmp	r3, #8
 800182a:	d00d      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x40>
 800182c:	2b08      	cmp	r3, #8
 800182e:	f200 80e1 	bhi.w	80019f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <HAL_RCC_GetSysClockFreq+0x34>
 8001836:	2b04      	cmp	r3, #4
 8001838:	d003      	beq.n	8001842 <HAL_RCC_GetSysClockFreq+0x3a>
 800183a:	e0db      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800183c:	4b73      	ldr	r3, [pc, #460]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x204>)
 800183e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001840:	e0db      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001842:	4b73      	ldr	r3, [pc, #460]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x208>)
 8001844:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001846:	e0d8      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001848:	4b6f      	ldr	r3, [pc, #444]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x200>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001850:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001852:	4b6d      	ldr	r3, [pc, #436]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d063      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800185e:	4b6a      	ldr	r3, [pc, #424]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	099b      	lsrs	r3, r3, #6
 8001864:	2200      	movs	r2, #0
 8001866:	63bb      	str	r3, [r7, #56]	; 0x38
 8001868:	63fa      	str	r2, [r7, #60]	; 0x3c
 800186a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800186c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
 8001872:	2300      	movs	r3, #0
 8001874:	637b      	str	r3, [r7, #52]	; 0x34
 8001876:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800187a:	4622      	mov	r2, r4
 800187c:	462b      	mov	r3, r5
 800187e:	f04f 0000 	mov.w	r0, #0
 8001882:	f04f 0100 	mov.w	r1, #0
 8001886:	0159      	lsls	r1, r3, #5
 8001888:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800188c:	0150      	lsls	r0, r2, #5
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4621      	mov	r1, r4
 8001894:	1a51      	subs	r1, r2, r1
 8001896:	6139      	str	r1, [r7, #16]
 8001898:	4629      	mov	r1, r5
 800189a:	eb63 0301 	sbc.w	r3, r3, r1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018ac:	4659      	mov	r1, fp
 80018ae:	018b      	lsls	r3, r1, #6
 80018b0:	4651      	mov	r1, sl
 80018b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018b6:	4651      	mov	r1, sl
 80018b8:	018a      	lsls	r2, r1, #6
 80018ba:	4651      	mov	r1, sl
 80018bc:	ebb2 0801 	subs.w	r8, r2, r1
 80018c0:	4659      	mov	r1, fp
 80018c2:	eb63 0901 	sbc.w	r9, r3, r1
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018da:	4690      	mov	r8, r2
 80018dc:	4699      	mov	r9, r3
 80018de:	4623      	mov	r3, r4
 80018e0:	eb18 0303 	adds.w	r3, r8, r3
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	462b      	mov	r3, r5
 80018e8:	eb49 0303 	adc.w	r3, r9, r3
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018fa:	4629      	mov	r1, r5
 80018fc:	024b      	lsls	r3, r1, #9
 80018fe:	4621      	mov	r1, r4
 8001900:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001904:	4621      	mov	r1, r4
 8001906:	024a      	lsls	r2, r1, #9
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800190e:	2200      	movs	r2, #0
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
 8001912:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001914:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001918:	f7fe fc56 	bl	80001c8 <__aeabi_uldivmod>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4613      	mov	r3, r2
 8001922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001924:	e058      	b.n	80019d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001926:	4b38      	ldr	r3, [pc, #224]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	099b      	lsrs	r3, r3, #6
 800192c:	2200      	movs	r2, #0
 800192e:	4618      	mov	r0, r3
 8001930:	4611      	mov	r1, r2
 8001932:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001936:	623b      	str	r3, [r7, #32]
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
 800193c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001940:	4642      	mov	r2, r8
 8001942:	464b      	mov	r3, r9
 8001944:	f04f 0000 	mov.w	r0, #0
 8001948:	f04f 0100 	mov.w	r1, #0
 800194c:	0159      	lsls	r1, r3, #5
 800194e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001952:	0150      	lsls	r0, r2, #5
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4641      	mov	r1, r8
 800195a:	ebb2 0a01 	subs.w	sl, r2, r1
 800195e:	4649      	mov	r1, r9
 8001960:	eb63 0b01 	sbc.w	fp, r3, r1
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001970:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001974:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001978:	ebb2 040a 	subs.w	r4, r2, sl
 800197c:	eb63 050b 	sbc.w	r5, r3, fp
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	00eb      	lsls	r3, r5, #3
 800198a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800198e:	00e2      	lsls	r2, r4, #3
 8001990:	4614      	mov	r4, r2
 8001992:	461d      	mov	r5, r3
 8001994:	4643      	mov	r3, r8
 8001996:	18e3      	adds	r3, r4, r3
 8001998:	603b      	str	r3, [r7, #0]
 800199a:	464b      	mov	r3, r9
 800199c:	eb45 0303 	adc.w	r3, r5, r3
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019ae:	4629      	mov	r1, r5
 80019b0:	028b      	lsls	r3, r1, #10
 80019b2:	4621      	mov	r1, r4
 80019b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019b8:	4621      	mov	r1, r4
 80019ba:	028a      	lsls	r2, r1, #10
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019c2:	2200      	movs	r2, #0
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	61fa      	str	r2, [r7, #28]
 80019c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019cc:	f7fe fbfc 	bl	80001c8 <__aeabi_uldivmod>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4613      	mov	r3, r2
 80019d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x200>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	0c1b      	lsrs	r3, r3, #16
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	3301      	adds	r3, #1
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80019e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019f2:	e002      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x204>)
 80019f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3750      	adds	r7, #80	; 0x50
 8001a00:	46bd      	mov	sp, r7
 8001a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	00f42400 	.word	0x00f42400
 8001a10:	007a1200 	.word	0x007a1200

08001a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000004 	.word	0x20000004

08001a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a30:	f7ff fff0 	bl	8001a14 <HAL_RCC_GetHCLKFreq>
 8001a34:	4602      	mov	r2, r0
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	0a9b      	lsrs	r3, r3, #10
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	4903      	ldr	r1, [pc, #12]	; (8001a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a42:	5ccb      	ldrb	r3, [r1, r3]
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	080029ec 	.word	0x080029ec

08001a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a58:	f7ff ffdc 	bl	8001a14 <HAL_RCC_GetHCLKFreq>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	0b5b      	lsrs	r3, r3, #13
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	4903      	ldr	r1, [pc, #12]	; (8001a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a6a:	5ccb      	ldrb	r3, [r1, r3]
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40023800 	.word	0x40023800
 8001a78:	080029ec 	.word	0x080029ec

08001a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e03f      	b.n	8001b0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d106      	bne.n	8001aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7fe ff26 	bl	80008f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2224      	movs	r2, #36	; 0x24
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 fcdf 	bl	8002484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695a      	ldr	r2, [r3, #20]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2220      	movs	r2, #32
 8001b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2220      	movs	r2, #32
 8001b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b084      	sub	sp, #16
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	4613      	mov	r3, r2
 8001b22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b20      	cmp	r3, #32
 8001b2e:	d11d      	bne.n	8001b6c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <HAL_UART_Receive_IT+0x26>
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e016      	b.n	8001b6e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_UART_Receive_IT+0x38>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e00f      	b.n	8001b6e <HAL_UART_Receive_IT+0x58>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f000 fab6 	bl	80020d4 <UART_Start_Receive_IT>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	e000      	b.n	8001b6e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001b6c:	2302      	movs	r3, #2
  }
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b0ba      	sub	sp, #232	; 0xe8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001bb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10f      	bne.n	8001bde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bc2:	f003 0320 	and.w	r3, r3, #32
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d009      	beq.n	8001bde <HAL_UART_IRQHandler+0x66>
 8001bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001bce:	f003 0320 	and.w	r3, r3, #32
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 fb99 	bl	800230e <UART_Receive_IT>
      return;
 8001bdc:	e256      	b.n	800208c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001bde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 80de 	beq.w	8001da4 <HAL_UART_IRQHandler+0x22c>
 8001be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d106      	bne.n	8001c02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001bf8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80d1 	beq.w	8001da4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <HAL_UART_IRQHandler+0xae>
 8001c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d005      	beq.n	8001c26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f043 0201 	orr.w	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00b      	beq.n	8001c4a <HAL_UART_IRQHandler+0xd2>
 8001c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d005      	beq.n	8001c4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f043 0202 	orr.w	r2, r3, #2
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00b      	beq.n	8001c6e <HAL_UART_IRQHandler+0xf6>
 8001c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f043 0204 	orr.w	r2, r3, #4
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d011      	beq.n	8001c9e <HAL_UART_IRQHandler+0x126>
 8001c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d105      	bne.n	8001c92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f043 0208 	orr.w	r2, r3, #8
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 81ed 	beq.w	8002082 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cac:	f003 0320 	and.w	r3, r3, #32
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d008      	beq.n	8001cc6 <HAL_UART_IRQHandler+0x14e>
 8001cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cb8:	f003 0320 	and.w	r3, r3, #32
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 fb24 	bl	800230e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd0:	2b40      	cmp	r3, #64	; 0x40
 8001cd2:	bf0c      	ite	eq
 8001cd4:	2301      	moveq	r3, #1
 8001cd6:	2300      	movne	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d103      	bne.n	8001cf2 <HAL_UART_IRQHandler+0x17a>
 8001cea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d04f      	beq.n	8001d92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 fa2c 	bl	8002150 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d02:	2b40      	cmp	r3, #64	; 0x40
 8001d04:	d141      	bne.n	8001d8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	3314      	adds	r3, #20
 8001d0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d14:	e853 3f00 	ldrex	r3, [r3]
 8001d18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001d1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	3314      	adds	r3, #20
 8001d2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001d32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001d36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001d3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001d42:	e841 2300 	strex	r3, r2, [r1]
 8001d46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001d4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1d9      	bne.n	8001d06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d013      	beq.n	8001d82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5e:	4a7d      	ldr	r2, [pc, #500]	; (8001f54 <HAL_UART_IRQHandler+0x3dc>)
 8001d60:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f831 	bl	8000dce <HAL_DMA_Abort_IT>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d016      	beq.n	8001da0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d80:	e00e      	b.n	8001da0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f990 	bl	80020a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d88:	e00a      	b.n	8001da0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f98c 	bl	80020a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d90:	e006      	b.n	8001da0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f988 	bl	80020a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001d9e:	e170      	b.n	8002082 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001da0:	bf00      	nop
    return;
 8001da2:	e16e      	b.n	8002082 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	f040 814a 	bne.w	8002042 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8143 	beq.w	8002042 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 813c 	beq.w	8002042 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dea:	2b40      	cmp	r3, #64	; 0x40
 8001dec:	f040 80b4 	bne.w	8001f58 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001dfc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 8140 	beq.w	8002086 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001e0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	f080 8139 	bcs.w	8002086 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001e1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e26:	f000 8088 	beq.w	8001f3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	330c      	adds	r3, #12
 8001e30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e38:	e853 3f00 	ldrex	r3, [r3]
 8001e3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001e40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	330c      	adds	r3, #12
 8001e52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001e56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001e5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001e62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e66:	e841 2300 	strex	r3, r2, [r1]
 8001e6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1d9      	bne.n	8001e2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	3314      	adds	r3, #20
 8001e7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e80:	e853 3f00 	ldrex	r3, [r3]
 8001e84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	3314      	adds	r3, #20
 8001e96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001e9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ea0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001ea2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001ea6:	e841 2300 	strex	r3, r2, [r1]
 8001eaa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001eac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1e1      	bne.n	8001e76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	3314      	adds	r3, #20
 8001eb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ebc:	e853 3f00 	ldrex	r3, [r3]
 8001ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ec8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3314      	adds	r3, #20
 8001ed2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001ed6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001ed8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001edc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001ede:	e841 2300 	strex	r3, r2, [r1]
 8001ee2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001ee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1e3      	bne.n	8001eb2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2220      	movs	r2, #32
 8001eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	330c      	adds	r3, #12
 8001efe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f02:	e853 3f00 	ldrex	r3, [r3]
 8001f06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f0a:	f023 0310 	bic.w	r3, r3, #16
 8001f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	330c      	adds	r3, #12
 8001f18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001f1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f24:	e841 2300 	strex	r3, r2, [r1]
 8001f28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1e3      	bne.n	8001ef8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe feda 	bl	8000cee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	4619      	mov	r1, r3
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8b6 	bl	80020bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001f50:	e099      	b.n	8002086 <HAL_UART_IRQHandler+0x50e>
 8001f52:	bf00      	nop
 8001f54:	08002217 	.word	0x08002217
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 808b 	beq.w	800208a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8001f74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 8086 	beq.w	800208a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	330c      	adds	r3, #12
 8001f84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f88:	e853 3f00 	ldrex	r3, [r3]
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001f94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	330c      	adds	r3, #12
 8001f9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001fa2:	647a      	str	r2, [r7, #68]	; 0x44
 8001fa4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fa6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001fa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001faa:	e841 2300 	strex	r3, r2, [r1]
 8001fae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1e3      	bne.n	8001f7e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	3314      	adds	r3, #20
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	e853 3f00 	ldrex	r3, [r3]
 8001fc4:	623b      	str	r3, [r7, #32]
   return(result);
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	3314      	adds	r3, #20
 8001fd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001fda:	633a      	str	r2, [r7, #48]	; 0x30
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fe2:	e841 2300 	strex	r3, r2, [r1]
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1e3      	bne.n	8001fb6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	330c      	adds	r3, #12
 8002002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	e853 3f00 	ldrex	r3, [r3]
 800200a:	60fb      	str	r3, [r7, #12]
   return(result);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f023 0310 	bic.w	r3, r3, #16
 8002012:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	330c      	adds	r3, #12
 800201c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002020:	61fa      	str	r2, [r7, #28]
 8002022:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002024:	69b9      	ldr	r1, [r7, #24]
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	e841 2300 	strex	r3, r2, [r1]
 800202c:	617b      	str	r3, [r7, #20]
   return(result);
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1e3      	bne.n	8001ffc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002034:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002038:	4619      	mov	r1, r3
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f83e 	bl	80020bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002040:	e023      	b.n	800208a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204a:	2b00      	cmp	r3, #0
 800204c:	d009      	beq.n	8002062 <HAL_UART_IRQHandler+0x4ea>
 800204e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f8ef 	bl	800223e <UART_Transmit_IT>
    return;
 8002060:	e014      	b.n	800208c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00e      	beq.n	800208c <HAL_UART_IRQHandler+0x514>
 800206e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d008      	beq.n	800208c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f92f 	bl	80022de <UART_EndTransmit_IT>
    return;
 8002080:	e004      	b.n	800208c <HAL_UART_IRQHandler+0x514>
    return;
 8002082:	bf00      	nop
 8002084:	e002      	b.n	800208c <HAL_UART_IRQHandler+0x514>
      return;
 8002086:	bf00      	nop
 8002088:	e000      	b.n	800208c <HAL_UART_IRQHandler+0x514>
      return;
 800208a:	bf00      	nop
  }
}
 800208c:	37e8      	adds	r7, #232	; 0xe8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop

08002094 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	4613      	mov	r3, r2
 80020e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	88fa      	ldrh	r2, [r7, #6]
 80020ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	88fa      	ldrh	r2, [r7, #6]
 80020f2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2222      	movs	r2, #34	; 0x22
 80020fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d007      	beq.n	8002122 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002120:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695a      	ldr	r2, [r3, #20]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 0201 	orr.w	r2, r2, #1
 8002130:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 0220 	orr.w	r2, r2, #32
 8002140:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002150:	b480      	push	{r7}
 8002152:	b095      	sub	sp, #84	; 0x54
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	330c      	adds	r3, #12
 800215e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002162:	e853 3f00 	ldrex	r3, [r3]
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800216e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	330c      	adds	r3, #12
 8002176:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002178:	643a      	str	r2, [r7, #64]	; 0x40
 800217a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800217c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800217e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002180:	e841 2300 	strex	r3, r2, [r1]
 8002184:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1e5      	bne.n	8002158 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	3314      	adds	r3, #20
 8002192:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	e853 3f00 	ldrex	r3, [r3]
 800219a:	61fb      	str	r3, [r7, #28]
   return(result);
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f023 0301 	bic.w	r3, r3, #1
 80021a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	3314      	adds	r3, #20
 80021aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021b4:	e841 2300 	strex	r3, r2, [r1]
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e5      	bne.n	800218c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d119      	bne.n	80021fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	330c      	adds	r3, #12
 80021ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	e853 3f00 	ldrex	r3, [r3]
 80021d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f023 0310 	bic.w	r3, r3, #16
 80021de:	647b      	str	r3, [r7, #68]	; 0x44
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	330c      	adds	r3, #12
 80021e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021e8:	61ba      	str	r2, [r7, #24]
 80021ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ec:	6979      	ldr	r1, [r7, #20]
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	e841 2300 	strex	r3, r2, [r1]
 80021f4:	613b      	str	r3, [r7, #16]
   return(result);
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1e5      	bne.n	80021c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	631a      	str	r2, [r3, #48]	; 0x30
}
 800220a:	bf00      	nop
 800220c:	3754      	adds	r7, #84	; 0x54
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b084      	sub	sp, #16
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002222:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f7ff ff39 	bl	80020a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b21      	cmp	r3, #33	; 0x21
 8002250:	d13e      	bne.n	80022d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800225a:	d114      	bne.n	8002286 <UART_Transmit_IT+0x48>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d110      	bne.n	8002286 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002278:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	1c9a      	adds	r2, r3, #2
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	621a      	str	r2, [r3, #32]
 8002284:	e008      	b.n	8002298 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	1c59      	adds	r1, r3, #1
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6211      	str	r1, [r2, #32]
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800229c:	b29b      	uxth	r3, r3
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	4619      	mov	r1, r3
 80022a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10f      	bne.n	80022cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e000      	b.n	80022d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80022d0:	2302      	movs	r3, #2
  }
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2220      	movs	r2, #32
 80022fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff fec8 	bl	8002094 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b08c      	sub	sp, #48	; 0x30
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b22      	cmp	r3, #34	; 0x22
 8002320:	f040 80ab 	bne.w	800247a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800232c:	d117      	bne.n	800235e <UART_Receive_IT+0x50>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d113      	bne.n	800235e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002336:	2300      	movs	r3, #0
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	b29b      	uxth	r3, r3
 8002348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800234c:	b29a      	uxth	r2, r3
 800234e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002350:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	1c9a      	adds	r2, r3, #2
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	629a      	str	r2, [r3, #40]	; 0x28
 800235c:	e026      	b.n	80023ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002362:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002364:	2300      	movs	r3, #0
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002370:	d007      	beq.n	8002382 <UART_Receive_IT+0x74>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10a      	bne.n	8002390 <UART_Receive_IT+0x82>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238c:	701a      	strb	r2, [r3, #0]
 800238e:	e008      	b.n	80023a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800239c:	b2da      	uxtb	r2, r3
 800239e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	4619      	mov	r1, r3
 80023ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d15a      	bne.n	8002476 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0220 	bic.w	r2, r2, #32
 80023ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d135      	bne.n	800246c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	330c      	adds	r3, #12
 800240c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	e853 3f00 	ldrex	r3, [r3]
 8002414:	613b      	str	r3, [r7, #16]
   return(result);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	f023 0310 	bic.w	r3, r3, #16
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	330c      	adds	r3, #12
 8002424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002426:	623a      	str	r2, [r7, #32]
 8002428:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800242a:	69f9      	ldr	r1, [r7, #28]
 800242c:	6a3a      	ldr	r2, [r7, #32]
 800242e:	e841 2300 	strex	r3, r2, [r1]
 8002432:	61bb      	str	r3, [r7, #24]
   return(result);
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1e5      	bne.n	8002406 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b10      	cmp	r3, #16
 8002446:	d10a      	bne.n	800245e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002462:	4619      	mov	r1, r3
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff fe29 	bl	80020bc <HAL_UARTEx_RxEventCallback>
 800246a:	e002      	b.n	8002472 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7fe f98b 	bl	8000788 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	e002      	b.n	800247c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	e000      	b.n	800247c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800247a:	2302      	movs	r3, #2
  }
}
 800247c:	4618      	mov	r0, r3
 800247e:	3730      	adds	r7, #48	; 0x30
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002488:	b0c0      	sub	sp, #256	; 0x100
 800248a:	af00      	add	r7, sp, #0
 800248c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800249c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a0:	68d9      	ldr	r1, [r3, #12]
 80024a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	ea40 0301 	orr.w	r3, r0, r1
 80024ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	431a      	orrs	r2, r3
 80024bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80024dc:	f021 010c 	bic.w	r1, r1, #12
 80024e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80024ea:	430b      	orrs	r3, r1
 80024ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80024fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024fe:	6999      	ldr	r1, [r3, #24]
 8002500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	ea40 0301 	orr.w	r3, r0, r1
 800250a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800250c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b8f      	ldr	r3, [pc, #572]	; (8002750 <UART_SetConfig+0x2cc>)
 8002514:	429a      	cmp	r2, r3
 8002516:	d005      	beq.n	8002524 <UART_SetConfig+0xa0>
 8002518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	4b8d      	ldr	r3, [pc, #564]	; (8002754 <UART_SetConfig+0x2d0>)
 8002520:	429a      	cmp	r2, r3
 8002522:	d104      	bne.n	800252e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002524:	f7ff fa96 	bl	8001a54 <HAL_RCC_GetPCLK2Freq>
 8002528:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800252c:	e003      	b.n	8002536 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800252e:	f7ff fa7d 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 8002532:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002540:	f040 810c 	bne.w	800275c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002548:	2200      	movs	r2, #0
 800254a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800254e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002552:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002556:	4622      	mov	r2, r4
 8002558:	462b      	mov	r3, r5
 800255a:	1891      	adds	r1, r2, r2
 800255c:	65b9      	str	r1, [r7, #88]	; 0x58
 800255e:	415b      	adcs	r3, r3
 8002560:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002562:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002566:	4621      	mov	r1, r4
 8002568:	eb12 0801 	adds.w	r8, r2, r1
 800256c:	4629      	mov	r1, r5
 800256e:	eb43 0901 	adc.w	r9, r3, r1
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800257e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002582:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002586:	4690      	mov	r8, r2
 8002588:	4699      	mov	r9, r3
 800258a:	4623      	mov	r3, r4
 800258c:	eb18 0303 	adds.w	r3, r8, r3
 8002590:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002594:	462b      	mov	r3, r5
 8002596:	eb49 0303 	adc.w	r3, r9, r3
 800259a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800259e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80025aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80025ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80025b2:	460b      	mov	r3, r1
 80025b4:	18db      	adds	r3, r3, r3
 80025b6:	653b      	str	r3, [r7, #80]	; 0x50
 80025b8:	4613      	mov	r3, r2
 80025ba:	eb42 0303 	adc.w	r3, r2, r3
 80025be:	657b      	str	r3, [r7, #84]	; 0x54
 80025c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80025c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80025c8:	f7fd fdfe 	bl	80001c8 <__aeabi_uldivmod>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4b61      	ldr	r3, [pc, #388]	; (8002758 <UART_SetConfig+0x2d4>)
 80025d2:	fba3 2302 	umull	r2, r3, r3, r2
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	011c      	lsls	r4, r3, #4
 80025da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025de:	2200      	movs	r2, #0
 80025e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80025e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80025ec:	4642      	mov	r2, r8
 80025ee:	464b      	mov	r3, r9
 80025f0:	1891      	adds	r1, r2, r2
 80025f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80025f4:	415b      	adcs	r3, r3
 80025f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025fc:	4641      	mov	r1, r8
 80025fe:	eb12 0a01 	adds.w	sl, r2, r1
 8002602:	4649      	mov	r1, r9
 8002604:	eb43 0b01 	adc.w	fp, r3, r1
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002614:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002618:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800261c:	4692      	mov	sl, r2
 800261e:	469b      	mov	fp, r3
 8002620:	4643      	mov	r3, r8
 8002622:	eb1a 0303 	adds.w	r3, sl, r3
 8002626:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800262a:	464b      	mov	r3, r9
 800262c:	eb4b 0303 	adc.w	r3, fp, r3
 8002630:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002640:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002644:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002648:	460b      	mov	r3, r1
 800264a:	18db      	adds	r3, r3, r3
 800264c:	643b      	str	r3, [r7, #64]	; 0x40
 800264e:	4613      	mov	r3, r2
 8002650:	eb42 0303 	adc.w	r3, r2, r3
 8002654:	647b      	str	r3, [r7, #68]	; 0x44
 8002656:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800265a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800265e:	f7fd fdb3 	bl	80001c8 <__aeabi_uldivmod>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4611      	mov	r1, r2
 8002668:	4b3b      	ldr	r3, [pc, #236]	; (8002758 <UART_SetConfig+0x2d4>)
 800266a:	fba3 2301 	umull	r2, r3, r3, r1
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2264      	movs	r2, #100	; 0x64
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	1acb      	subs	r3, r1, r3
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800267e:	4b36      	ldr	r3, [pc, #216]	; (8002758 <UART_SetConfig+0x2d4>)
 8002680:	fba3 2302 	umull	r2, r3, r3, r2
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800268c:	441c      	add	r4, r3
 800268e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002692:	2200      	movs	r2, #0
 8002694:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002698:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800269c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80026a0:	4642      	mov	r2, r8
 80026a2:	464b      	mov	r3, r9
 80026a4:	1891      	adds	r1, r2, r2
 80026a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80026a8:	415b      	adcs	r3, r3
 80026aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80026b0:	4641      	mov	r1, r8
 80026b2:	1851      	adds	r1, r2, r1
 80026b4:	6339      	str	r1, [r7, #48]	; 0x30
 80026b6:	4649      	mov	r1, r9
 80026b8:	414b      	adcs	r3, r1
 80026ba:	637b      	str	r3, [r7, #52]	; 0x34
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80026c8:	4659      	mov	r1, fp
 80026ca:	00cb      	lsls	r3, r1, #3
 80026cc:	4651      	mov	r1, sl
 80026ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026d2:	4651      	mov	r1, sl
 80026d4:	00ca      	lsls	r2, r1, #3
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	4603      	mov	r3, r0
 80026dc:	4642      	mov	r2, r8
 80026de:	189b      	adds	r3, r3, r2
 80026e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026e4:	464b      	mov	r3, r9
 80026e6:	460a      	mov	r2, r1
 80026e8:	eb42 0303 	adc.w	r3, r2, r3
 80026ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80026fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002700:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002704:	460b      	mov	r3, r1
 8002706:	18db      	adds	r3, r3, r3
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
 800270a:	4613      	mov	r3, r2
 800270c:	eb42 0303 	adc.w	r3, r2, r3
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002712:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002716:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800271a:	f7fd fd55 	bl	80001c8 <__aeabi_uldivmod>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <UART_SetConfig+0x2d4>)
 8002724:	fba3 1302 	umull	r1, r3, r3, r2
 8002728:	095b      	lsrs	r3, r3, #5
 800272a:	2164      	movs	r1, #100	; 0x64
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	3332      	adds	r3, #50	; 0x32
 8002736:	4a08      	ldr	r2, [pc, #32]	; (8002758 <UART_SetConfig+0x2d4>)
 8002738:	fba2 2303 	umull	r2, r3, r2, r3
 800273c:	095b      	lsrs	r3, r3, #5
 800273e:	f003 0207 	and.w	r2, r3, #7
 8002742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4422      	add	r2, r4
 800274a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800274c:	e106      	b.n	800295c <UART_SetConfig+0x4d8>
 800274e:	bf00      	nop
 8002750:	40011000 	.word	0x40011000
 8002754:	40011400 	.word	0x40011400
 8002758:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800275c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002760:	2200      	movs	r2, #0
 8002762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002766:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800276a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800276e:	4642      	mov	r2, r8
 8002770:	464b      	mov	r3, r9
 8002772:	1891      	adds	r1, r2, r2
 8002774:	6239      	str	r1, [r7, #32]
 8002776:	415b      	adcs	r3, r3
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
 800277a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800277e:	4641      	mov	r1, r8
 8002780:	1854      	adds	r4, r2, r1
 8002782:	4649      	mov	r1, r9
 8002784:	eb43 0501 	adc.w	r5, r3, r1
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	00eb      	lsls	r3, r5, #3
 8002792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002796:	00e2      	lsls	r2, r4, #3
 8002798:	4614      	mov	r4, r2
 800279a:	461d      	mov	r5, r3
 800279c:	4643      	mov	r3, r8
 800279e:	18e3      	adds	r3, r4, r3
 80027a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027a4:	464b      	mov	r3, r9
 80027a6:	eb45 0303 	adc.w	r3, r5, r3
 80027aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80027ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80027ca:	4629      	mov	r1, r5
 80027cc:	008b      	lsls	r3, r1, #2
 80027ce:	4621      	mov	r1, r4
 80027d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027d4:	4621      	mov	r1, r4
 80027d6:	008a      	lsls	r2, r1, #2
 80027d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80027dc:	f7fd fcf4 	bl	80001c8 <__aeabi_uldivmod>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4b60      	ldr	r3, [pc, #384]	; (8002968 <UART_SetConfig+0x4e4>)
 80027e6:	fba3 2302 	umull	r2, r3, r3, r2
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	011c      	lsls	r4, r3, #4
 80027ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027f2:	2200      	movs	r2, #0
 80027f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80027fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002800:	4642      	mov	r2, r8
 8002802:	464b      	mov	r3, r9
 8002804:	1891      	adds	r1, r2, r2
 8002806:	61b9      	str	r1, [r7, #24]
 8002808:	415b      	adcs	r3, r3
 800280a:	61fb      	str	r3, [r7, #28]
 800280c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002810:	4641      	mov	r1, r8
 8002812:	1851      	adds	r1, r2, r1
 8002814:	6139      	str	r1, [r7, #16]
 8002816:	4649      	mov	r1, r9
 8002818:	414b      	adcs	r3, r1
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002828:	4659      	mov	r1, fp
 800282a:	00cb      	lsls	r3, r1, #3
 800282c:	4651      	mov	r1, sl
 800282e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002832:	4651      	mov	r1, sl
 8002834:	00ca      	lsls	r2, r1, #3
 8002836:	4610      	mov	r0, r2
 8002838:	4619      	mov	r1, r3
 800283a:	4603      	mov	r3, r0
 800283c:	4642      	mov	r2, r8
 800283e:	189b      	adds	r3, r3, r2
 8002840:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002844:	464b      	mov	r3, r9
 8002846:	460a      	mov	r2, r1
 8002848:	eb42 0303 	adc.w	r3, r2, r3
 800284c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	67bb      	str	r3, [r7, #120]	; 0x78
 800285a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002868:	4649      	mov	r1, r9
 800286a:	008b      	lsls	r3, r1, #2
 800286c:	4641      	mov	r1, r8
 800286e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002872:	4641      	mov	r1, r8
 8002874:	008a      	lsls	r2, r1, #2
 8002876:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800287a:	f7fd fca5 	bl	80001c8 <__aeabi_uldivmod>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4611      	mov	r1, r2
 8002884:	4b38      	ldr	r3, [pc, #224]	; (8002968 <UART_SetConfig+0x4e4>)
 8002886:	fba3 2301 	umull	r2, r3, r3, r1
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2264      	movs	r2, #100	; 0x64
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	1acb      	subs	r3, r1, r3
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	3332      	adds	r3, #50	; 0x32
 8002898:	4a33      	ldr	r2, [pc, #204]	; (8002968 <UART_SetConfig+0x4e4>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028a4:	441c      	add	r4, r3
 80028a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028aa:	2200      	movs	r2, #0
 80028ac:	673b      	str	r3, [r7, #112]	; 0x70
 80028ae:	677a      	str	r2, [r7, #116]	; 0x74
 80028b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80028b4:	4642      	mov	r2, r8
 80028b6:	464b      	mov	r3, r9
 80028b8:	1891      	adds	r1, r2, r2
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	415b      	adcs	r3, r3
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028c4:	4641      	mov	r1, r8
 80028c6:	1851      	adds	r1, r2, r1
 80028c8:	6039      	str	r1, [r7, #0]
 80028ca:	4649      	mov	r1, r9
 80028cc:	414b      	adcs	r3, r1
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028dc:	4659      	mov	r1, fp
 80028de:	00cb      	lsls	r3, r1, #3
 80028e0:	4651      	mov	r1, sl
 80028e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028e6:	4651      	mov	r1, sl
 80028e8:	00ca      	lsls	r2, r1, #3
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	4603      	mov	r3, r0
 80028f0:	4642      	mov	r2, r8
 80028f2:	189b      	adds	r3, r3, r2
 80028f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80028f6:	464b      	mov	r3, r9
 80028f8:	460a      	mov	r2, r1
 80028fa:	eb42 0303 	adc.w	r3, r2, r3
 80028fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	663b      	str	r3, [r7, #96]	; 0x60
 800290a:	667a      	str	r2, [r7, #100]	; 0x64
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002918:	4649      	mov	r1, r9
 800291a:	008b      	lsls	r3, r1, #2
 800291c:	4641      	mov	r1, r8
 800291e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002922:	4641      	mov	r1, r8
 8002924:	008a      	lsls	r2, r1, #2
 8002926:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800292a:	f7fd fc4d 	bl	80001c8 <__aeabi_uldivmod>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <UART_SetConfig+0x4e4>)
 8002934:	fba3 1302 	umull	r1, r3, r3, r2
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	2164      	movs	r1, #100	; 0x64
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	3332      	adds	r3, #50	; 0x32
 8002946:	4a08      	ldr	r2, [pc, #32]	; (8002968 <UART_SetConfig+0x4e4>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	095b      	lsrs	r3, r3, #5
 800294e:	f003 020f 	and.w	r2, r3, #15
 8002952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4422      	add	r2, r4
 800295a:	609a      	str	r2, [r3, #8]
}
 800295c:	bf00      	nop
 800295e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002962:	46bd      	mov	sp, r7
 8002964:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002968:	51eb851f 	.word	0x51eb851f

0800296c <memset>:
 800296c:	4402      	add	r2, r0
 800296e:	4603      	mov	r3, r0
 8002970:	4293      	cmp	r3, r2
 8002972:	d100      	bne.n	8002976 <memset+0xa>
 8002974:	4770      	bx	lr
 8002976:	f803 1b01 	strb.w	r1, [r3], #1
 800297a:	e7f9      	b.n	8002970 <memset+0x4>

0800297c <__libc_init_array>:
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	4d0d      	ldr	r5, [pc, #52]	; (80029b4 <__libc_init_array+0x38>)
 8002980:	4c0d      	ldr	r4, [pc, #52]	; (80029b8 <__libc_init_array+0x3c>)
 8002982:	1b64      	subs	r4, r4, r5
 8002984:	10a4      	asrs	r4, r4, #2
 8002986:	2600      	movs	r6, #0
 8002988:	42a6      	cmp	r6, r4
 800298a:	d109      	bne.n	80029a0 <__libc_init_array+0x24>
 800298c:	4d0b      	ldr	r5, [pc, #44]	; (80029bc <__libc_init_array+0x40>)
 800298e:	4c0c      	ldr	r4, [pc, #48]	; (80029c0 <__libc_init_array+0x44>)
 8002990:	f000 f818 	bl	80029c4 <_init>
 8002994:	1b64      	subs	r4, r4, r5
 8002996:	10a4      	asrs	r4, r4, #2
 8002998:	2600      	movs	r6, #0
 800299a:	42a6      	cmp	r6, r4
 800299c:	d105      	bne.n	80029aa <__libc_init_array+0x2e>
 800299e:	bd70      	pop	{r4, r5, r6, pc}
 80029a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a4:	4798      	blx	r3
 80029a6:	3601      	adds	r6, #1
 80029a8:	e7ee      	b.n	8002988 <__libc_init_array+0xc>
 80029aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ae:	4798      	blx	r3
 80029b0:	3601      	adds	r6, #1
 80029b2:	e7f2      	b.n	800299a <__libc_init_array+0x1e>
 80029b4:	080029fc 	.word	0x080029fc
 80029b8:	080029fc 	.word	0x080029fc
 80029bc:	080029fc 	.word	0x080029fc
 80029c0:	08002a00 	.word	0x08002a00

080029c4 <_init>:
 80029c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c6:	bf00      	nop
 80029c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ca:	bc08      	pop	{r3}
 80029cc:	469e      	mov	lr, r3
 80029ce:	4770      	bx	lr

080029d0 <_fini>:
 80029d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d2:	bf00      	nop
 80029d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d6:	bc08      	pop	{r3}
 80029d8:	469e      	mov	lr, r3
 80029da:	4770      	bx	lr
